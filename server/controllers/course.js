const Course = require("../models/CourseModel");
const Category = require("../models/CategoriesModel");
const users = require("../models/UserModel");
const Rating = require("../models/RatingAndReviewModel");
const Section = require("../models/SectionModel");
const SubSection = require("../models/SubSectionModel");
const CourseProgress = require("../models/CourseProgressModel");
const { uploadImageToCloudinary } = require("../utility/imageUploader");
require("dotenv").config();
const { convertSecondToDuration } = require("../utility/secToDuration");

exports.createCourse = async (req, res) => {
  try {
    let {
      title,
      description,
      price,
      whatULearn,
      category,
      tag : _tag,
      instruction : _instruction,
      status,
    } = req.body;
  
    const thumbnail = req.files.thumbnail;

    // Convert the tag and instructions from stringified Array to Array
    const tag = JSON.parse(_tag);
    const instruction = JSON.parse(_instruction)

    if (
      !description ||
      !title ||
      !price ||
      !whatULearn ||
      !category ||
      !thumbnail ||
      !instruction.length ||
      !tag.length
    ) {
      return res.status(400).json({
        success: false,
        Message: "All fields are required",
      });
    }

    console.log(  title,
      description,
      price,
      whatULearn,
      category,
      tag,
      instruction,
      thumbnail,status)

      if(status == undefined){
        status = "Draft"
      }
    // check for instructor
    const userid = req.user.id;
    const instructorDetails = await users.findById( userid );

    if (!instructorDetails) {
      return res.status(404).json({
        success: false,
        Message: "Instructor Details not found .",
      });
    }

    // check given Category is valid or not
    const tagDetails = await Category.findById(category);
    console.log("3")

    if (!tagDetails) {
      return res.status(404).json({
        success: false,
        Message: "Tag Details not found",
      });
    }
    const thumbnailImage = await uploadImageToCloudinary(
      thumbnail,
      process.env.FOLDER_NAME
    );
    const newCourse = await Course.create({
      title,
      description,
      price,
      createdBy: userid,
      whatULearn,
      tag,
      status:status,
      Instruction: instruction,
      category: tagDetails._id,
      thumbnail: thumbnailImage.secure_url,
    }).populate("courseContent").exec();

    await users.findByIdAndUpdate(
      { _id: userid },
      { $push: { courses: newCourse._id } },
      { new: true }
    );
    console.log("4")
    await Category.findByIdAndUpdate(
      { _id: tagDetails._id },
      { $push: { course: newCourse._id } },
      { new: true }
    );
    console.log("5")
    return res.status(200).json({
      success: true,
      data: newCourse,
      Message: "Course created successfully",
    });
  } catch (err) {
    return res.status(500).json({
      success: false,
      error: err,
      Message: "Error in creating Course",
    });
  }
};

exports.getAllCourses = async (req, res) => {
  try {
    const allCourses = await Course.find(
      {status:"Published"},
      {
        title: true,
        description: true,
        price: true,
        ratingAndReview: true,
        createdBy: true,
        createdAt: true,
        thumbnail: true,
        studentsEnrolled: true,
      }
    )
      .populate("createdBy")
      .exec();
    //The additional object in find will find all the courses and the ans will only contain the attributes with true values and the id generated by db.

    return res.status(200).json({
      success: true,
      data: allCourses,
      Message: "All coourses fetched successfully",
    });
  } catch (err) {
    return res.status(500).json({
      success: false,
      error: err,
      Message: "Error in getting All Courses",
    });
  }
};

// get CourseDetails
exports.getCourseDetails = async (req, res) => {
  try {
    const {courseID} = req.body;
    // const courseDetails = await Course.findById({courseID}) => Error : kyuki input ma ID di h to ye curly bracket nhi ayenga yaad rakhna h bas.
    const courseDetails = await Course.findById(courseID)
      .populate({
        path: "createdBy",
        populate: { path: "additionalinfo"},
      })
      .populate("category")
      // .populate("ratingAndReview")
      .populate({
        path: "courseContent",
        populate: {
          path: "subSection",
        },
      })
      .exec();

      // let courseProgressCount = await CourseProgress.findOne({
      //   courseID : courseID,
      //   userId : userId,
      // })

      if (!courseDetails) {
      return res.status(400).json({
        success: false,
        message: `Could find the course with courseID : ${courseID}`,

      });
    }

    let totalDurationInSeconds = 0;

    courseDetails.courseContent.forEach((course)=>{
      course.subSection.forEach((subs)=>{
        const timeDuration = parseInt(subs.time);
        totalDurationInSeconds += timeDuration;
      })
    })

    const totalDuration = convertSecondToDuration(totalDurationInSeconds);
    
    return res.status(200).json({
      success: true,
      message: "Details Fetched",
      data: { 
      courseDetails,
      totalDuration,
      }  
    });
  } catch (err) {
    return res.status(500).json({
      success: false,
      message: err.message,
    });
  }
};

// Delete Courses
exports.deleteCourse = async (req, res) => {
  try {
    console.log("A");
    const { courseID } = req.body;

    // Check if the courseID is present or not
    if (!courseID) {
      return res.status(404).json({
        status: false,
        message: "Invalid ID",
      });
    }

    const course = await Course.findById(courseID);

    if(!course){
      return res.status(404).json({
        status:false,
        message:"No course found with the given courseID"
      })
    }
    console.log("B");
    const deletedCourse = await Course.findByIdAndDelete(courseID)
      .populate("category")
      .populate({
        path: "createdBy",
        populate: {
          path: "additionalinfo",
        },
      })
      .exec();
      console.log("C");
       // Unenroll the students from course.
    const studentEnrolled = course.studentsEnrolled;
    if(studentEnrolled.length>0){
      for(const studentID of studentEnrolled){
        await users.findByIdAndUpdate(studentID,{
          $pull:{
            courses : courseID
          }
        })
      }
    }
    console.log("D");
    // Delete the section and SubSections
    const section = course.courseContent;
    for (const sectionId of section){
      const section = await Section.findById(sectionId);
      if(section){
        const subSection = section.subSection;
        for(const subSectionId of subSection){
          await SubSection.findByIdAndDelete(subSectionId);
        }
      }
      await Section.findByIdAndDelete(sectionId);
    }

    // CourseProgress ka dekhna h abhi.

    if (!deletedCourse) {
      return res.status(400).json({
        status: false,
        message: "Course is not Deleted. Please Try Again Later.",
      });
    }

    await Category.findByIdAndUpdate(
      deletedCourse.category._id,
      { $pull: { course: courseID } },
      { new: true }
    );
    console.log("E");
    return res.status(200).json({
      status: true,
      message: "Course is deleted.",
      deletedCourse
    });

  } catch (err) {
    return res.status(500).json({
      status: false,
      message: err.message,
    });
  }
};

// Get a list of Course for a given Instructor
exports.getInstructorCourse = async(req,res)=>{
  try{
  const instructorID = req.user.id
  if(!instructorID){
    return res.status(404).json({
      status:false,
      message:"Please give valid id"
    })
  }

  const courses = await Course.find({createdBy:instructorID});
  

  return res.json({
    status : true,
    message:"Fetched all the  courses related to this instructor",
    courses : courses
  })
  }catch(err){
    return res.status(500).json({
      status:false,
      message:"Error Occured while fetching the data for a particular Instructor"
    })
  }
}

// Edit The Course
exports.editCourse = async(req,res)=>{
  try{
    // Fetching Data
    const updates = req.body
    console.log(updates)
    const courseID = updates.courseId


    // checking if courseID is present or not
    if(!courseID){
      return res.status(404).json({
        status: false,
        message:"Enter a valid courseId."
      })
    }
    // Finiding the course with help of ID
    const course = await Course.findById(courseID)
    
    // Checking if there is any course with the given id or not
    if (!course) {
      return res.status(404).json({
        status:false,
        message:"No courses founded with the given ID."
      })
    }
    // checking if we are getting any thumbnail or not
    if(req.files){
      const thumbnail= req.files.thumbnail
      const thumbnailImage = await uploadImageToCloudinary(
        thumbnail,
        process.env.FOLDER_NAME
      );
      //Assining new thumbnail
        course.thumbnail=thumbnailImage.secure_url
    }

    // Updatin other fields
    for(const key in updates){
      if(updates.hasOwnProperty(key)){
      course[key] = updates[key]
    }
  }
  console.log(course);
  console.log("A");
   await  course.save()
  console.log("b")
   const updatedCourse = await Course.findOne({
    _id: courseID,
  })
    .populate({
      path: "createdBy",
      populate: {
        path: "additionalinfo",
      },
    })
    .populate("category")
    .populate("ratingAndReview")
    .populate({
      path: "courseContent",
      populate: {
        path: "subSection",
      },
    })
    .exec()

  return res.status(200).json({
    status:true,
    message:"Course updates Successfully .",
    updatedCourse : updatedCourse
  })

  }catch(err){
    return res.status(500).json({
      status:false,
      error:err.message ,
      message:"Error in updating content"
    })
  }
}

// same as getCourseDetails but in this token is also required .
exports.getFullCourseDetails = async(req,res)=>{
  try{
    const {courseId} = req.body;
    const userId = req.user.id;

    const courseDetails = await Course.findById(courseId)
    .populate({
      path: "createdBy",
      populate: { path: "additionalinfo" ,},
    })
    .populate("category")
    .populate("ratingAndReview")
    .populate({
      path: "courseContent",
      populate: {
        path: "subSection",
      },
    })
    .exec();

    if (!courseDetails) {
      return res.status(400).json({
        success: false,
        message: `Could not find course with id: ${courseId}`,
      })
    }

    const courseProgressCount = await CourseProgress.findOne({
      courseID:courseId,
      userId:userId
    })

    let totalDurationInSeconds = 0
    courseDetails.courseContent.forEach((content) => {
      content.subSection.forEach((subSection) => {
        const timeDurationInSeconds = parseInt(subSection.time)
        totalDurationInSeconds += timeDurationInSeconds
      })
    })

    const totalDuration = convertSecondToDuration(totalDurationInSeconds);
    return res.status(200).json({
      success: true,
      data: {
        courseDetails,
        totalDuration,
        completedVideos: courseProgressCount?.completedVedio
          ? courseProgressCount?.completedVedio
          : [],
      },
    })

  }catch(err){
    return res.status(500).json({
      success: false,
      message: err.message,
    })
  }
}